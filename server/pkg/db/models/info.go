// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Info is an object representing the database table.
type Info struct {
	OnerowID  bool   `boil:"onerow_id" json:"onerow_id" toml:"onerow_id" yaml:"onerow_id"`
	Starttime string `boil:"starttime" json:"starttime" toml:"starttime" yaml:"starttime"`

	R *infoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L infoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InfoColumns = struct {
	OnerowID  string
	Starttime string
}{
	OnerowID:  "onerow_id",
	Starttime: "starttime",
}

var InfoTableColumns = struct {
	OnerowID  string
	Starttime string
}{
	OnerowID:  "info.onerow_id",
	Starttime: "info.starttime",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var InfoWhere = struct {
	OnerowID  whereHelperbool
	Starttime whereHelperstring
}{
	OnerowID:  whereHelperbool{field: "\"info\".\"onerow_id\""},
	Starttime: whereHelperstring{field: "\"info\".\"starttime\""},
}

// InfoRels is where relationship names are stored.
var InfoRels = struct {
}{}

// infoR is where relationships are stored.
type infoR struct {
}

// NewStruct creates a new relationship struct
func (*infoR) NewStruct() *infoR {
	return &infoR{}
}

// infoL is where Load methods for each relationship are stored.
type infoL struct{}

var (
	infoAllColumns            = []string{"onerow_id", "starttime"}
	infoColumnsWithoutDefault = []string{"starttime"}
	infoColumnsWithDefault    = []string{"onerow_id"}
	infoPrimaryKeyColumns     = []string{"onerow_id"}
	infoGeneratedColumns      = []string{}
)

type (
	// InfoSlice is an alias for a slice of pointers to Info.
	// This should almost always be used instead of []Info.
	InfoSlice []*Info
	// InfoHook is the signature for custom Info hook methods
	InfoHook func(boil.Executor, *Info) error

	infoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	infoType                 = reflect.TypeOf(&Info{})
	infoMapping              = queries.MakeStructMapping(infoType)
	infoPrimaryKeyMapping, _ = queries.BindMapping(infoType, infoMapping, infoPrimaryKeyColumns)
	infoInsertCacheMut       sync.RWMutex
	infoInsertCache          = make(map[string]insertCache)
	infoUpdateCacheMut       sync.RWMutex
	infoUpdateCache          = make(map[string]updateCache)
	infoUpsertCacheMut       sync.RWMutex
	infoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var infoAfterSelectHooks []InfoHook

var infoBeforeInsertHooks []InfoHook
var infoAfterInsertHooks []InfoHook

var infoBeforeUpdateHooks []InfoHook
var infoAfterUpdateHooks []InfoHook

var infoBeforeDeleteHooks []InfoHook
var infoAfterDeleteHooks []InfoHook

var infoBeforeUpsertHooks []InfoHook
var infoAfterUpsertHooks []InfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Info) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range infoAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Info) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range infoBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Info) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range infoAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Info) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range infoBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Info) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range infoAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Info) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range infoBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Info) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range infoAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Info) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range infoBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Info) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range infoAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInfoHook registers your hook function for all future operations.
func AddInfoHook(hookPoint boil.HookPoint, infoHook InfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		infoAfterSelectHooks = append(infoAfterSelectHooks, infoHook)
	case boil.BeforeInsertHook:
		infoBeforeInsertHooks = append(infoBeforeInsertHooks, infoHook)
	case boil.AfterInsertHook:
		infoAfterInsertHooks = append(infoAfterInsertHooks, infoHook)
	case boil.BeforeUpdateHook:
		infoBeforeUpdateHooks = append(infoBeforeUpdateHooks, infoHook)
	case boil.AfterUpdateHook:
		infoAfterUpdateHooks = append(infoAfterUpdateHooks, infoHook)
	case boil.BeforeDeleteHook:
		infoBeforeDeleteHooks = append(infoBeforeDeleteHooks, infoHook)
	case boil.AfterDeleteHook:
		infoAfterDeleteHooks = append(infoAfterDeleteHooks, infoHook)
	case boil.BeforeUpsertHook:
		infoBeforeUpsertHooks = append(infoBeforeUpsertHooks, infoHook)
	case boil.AfterUpsertHook:
		infoAfterUpsertHooks = append(infoAfterUpsertHooks, infoHook)
	}
}

// One returns a single info record from the query.
func (q infoQuery) One(exec boil.Executor) (*Info, error) {
	o := &Info{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for info")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Info records from the query.
func (q infoQuery) All(exec boil.Executor) (InfoSlice, error) {
	var o []*Info

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Info slice")
	}

	if len(infoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Info records in the query.
func (q infoQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q infoQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if info exists")
	}

	return count > 0, nil
}

// Infos retrieves all the records using an executor.
func Infos(mods ...qm.QueryMod) infoQuery {
	mods = append(mods, qm.From("\"info\""))
	return infoQuery{NewQuery(mods...)}
}

// FindInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInfo(exec boil.Executor, onerowID bool, selectCols ...string) (*Info, error) {
	infoObj := &Info{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"info\" where \"onerow_id\"=$1", sel,
	)

	q := queries.Raw(query, onerowID)

	err := q.Bind(nil, exec, infoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from info")
	}

	if err = infoObj.doAfterSelectHooks(exec); err != nil {
		return infoObj, err
	}

	return infoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Info) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no info provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(infoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	infoInsertCacheMut.RLock()
	cache, cached := infoInsertCache[key]
	infoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			infoAllColumns,
			infoColumnsWithDefault,
			infoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(infoType, infoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(infoType, infoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"info\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"info\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into info")
	}

	if !cached {
		infoInsertCacheMut.Lock()
		infoInsertCache[key] = cache
		infoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Info.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Info) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	infoUpdateCacheMut.RLock()
	cache, cached := infoUpdateCache[key]
	infoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			infoAllColumns,
			infoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"info\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, infoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(infoType, infoMapping, append(wl, infoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for info")
	}

	if !cached {
		infoUpdateCacheMut.Lock()
		infoUpdateCache[key] = cache
		infoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q infoQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InfoSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), infoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, infoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in info slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all info")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Info) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no info provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(infoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	infoUpsertCacheMut.RLock()
	cache, cached := infoUpsertCache[key]
	infoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			infoAllColumns,
			infoColumnsWithDefault,
			infoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			infoAllColumns,
			infoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert info, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(infoPrimaryKeyColumns))
			copy(conflict, infoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"info\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(infoType, infoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(infoType, infoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert info")
	}

	if !cached {
		infoUpsertCacheMut.Lock()
		infoUpsertCache[key] = cache
		infoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Info record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Info) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Info provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), infoPrimaryKeyMapping)
	sql := "DELETE FROM \"info\" WHERE \"onerow_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for info")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q infoQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no infoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InfoSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(infoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), infoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, infoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from info slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for info")
	}

	if len(infoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Info) Reload(exec boil.Executor) error {
	ret, err := FindInfo(exec, o.OnerowID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InfoSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), infoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"info\".* FROM \"info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, infoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InfoSlice")
	}

	*o = slice

	return nil
}

// InfoExists checks if the Info row exists.
func InfoExists(exec boil.Executor, onerowID bool) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"info\" where \"onerow_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, onerowID)
	}
	row := exec.QueryRow(sql, onerowID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if info exists")
	}

	return exists, nil
}
